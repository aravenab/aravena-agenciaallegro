/* CLASE 3 Intro a css

sintaxis

selector{ 
    propiedad: valor
}

un selector puede ser una etiqueta, una clase, un ID.

PADRE E HIJOS

Cuando tienes una etiqueta “dentro”
de otra, lo que haces
es aplicar el concepto de padres e
hijos

EJ
<section>
 <article>
 <h2> Título </h2>
<p> Lorem ipsum dolor sit amet,
consectetur adipiscing elit, sed
do eiusmod tempor incididunt ut
labore et dolore magna aliqua. Ut
enim ad minim veniam, quis
nostrud exercitation ullamco
laboris nisi ut aliquip ex ea
commodo consequat.
</p>
 <article>
<section> 

En este caso, section es padre de
article y, a su vez, article es padre
del h2 y del p.


INSERTAR CSS EN EL HTML
Forma EXTERNA: dentro de la etiqueta <head>, llamas
al archivo CSS que necesites (recuerda el uso de rutas
relativas y absolutas).

Forma INTERNA: es recomendable que esté dentro de
la etiqueta <head>. Puede estar en <body>, pero
sería más desprolijo.

Otra forma INTERNA, muy poco recomendable,
consiste en usar para “parches” específicos, o
pruebas. Se hace difícil mantenerlo.

<h1>Un encabezado sin formato</h1>
<h2 style="CODIGO CSS">H2 con formato CSS</h2>
<p>Párrafo sin formatear</p>
<p style="CODIGO CSS">Párrafo formateado</p>
<p>Otro párrafo sin formatear</p>


CLASS DESDE CSS
Desde CSS, puedes usar los nombres que quieras,
siempre y cuando empiecen con LETRAS, y pongas un “.”
adelante. Lo recomendable es poner un nombre que haga
referencias a los estilos que tendrá. Por ejemplo: 

.bordesRedondeados {
codigo CSS 
HTML: ATRIBUTO CLASS=“”

En el HTML, para aplicar una clase debes usar el atributo
“class”, y luego colocar en el valor el nombre de la clase
(que has especificado en CSS)

<img src="" class="bordesRedondeados" />

Puedes aplicar más de una clase a cada etiqueta
separada por un espacio. De esta manera, podrás tener
estilos diferenciados para cada clase

<img src="" class="bordesRedondeados imgChica"/>

Generalmente se usa para nombrar porciones de código y sectores,
como por ejemplo cuando quieres nombrar distintas secciones.
Es posible ponerle ID a cualquier elemento HTML para darle un
"nombre". Y así como el ID, todos los elementos también aceptan el
atributo class="".
● Dicha clase se utiliza cuando quieres aplicar el mismo estilo a más
de un elemento, y la búsqueda por etiqueta no sirve para lograrlo.
● No necesitas escribir varias veces el mismo CSS, ni repetir el ID.

ID DESDE CSS
Desde CSS, puedes usar los nombres que quieras,
siempre y cuando empiecen con LETRAS, y pongas un “#”
adelante. Lo recomendable es poner un nombre que haga
referencias a los estilos que tendrá. Por ejemplo: 

#productos 

HTML: ATRIBUTO ID=“”

Para aplicar un ID en el HTML, debes usar el atributo “id”, y
luego en el valor el nombre del ID (que has especificado en
CSS). Por ejemplo:

!IMPORTANT;
● Si tienes 3 reglas CSS, es poco probable que “choquen”, pero en un CSS
extenso es más común.
● La declaración !important; corta la precedencia. Se escribe después del
valor de la propiedad CSS que se quiere convertir en la más importante.
Se utiliza un !important; por cada valor a pisar.
Si necesitás más de 5 !important; en todo tu CSS, algo estás haciendo mal.

RESETEO CSS
Los reset CSS contienen en su código fuente definiciones para
propiedades problemáticas, que los diseñadores necesitan unificar
desde un principio.
Por ejemplo, la mayoría de navegadores establece un margen por
defecto entre el contenido de la página web y su propia ventana,
cuyo valor varía de un navegador a otro.

Para subsanar esa diferencia, los diseñadores y las diseñadoras
de sitios webs suelen declarar la siguiente línea al comienzo de sus
hojas de estilo:

* {
 Margin:0;
 padding:0;
}
Esa única línea indica, con el selector universal de CSS representado
por un asterisco, que todos los elementos contenidos en el HTML a
los que se aplique, carecerán de márgenes. De esa manera, el
diseñador o la diseñadora se verán obligados a declarar luego los
márgenes necesarios en el diseño de su página web, en cada uno de
los lugares donde se requiera, sin tener que dejar ese aspecto a
decisión de ningún navegador, y minimizando las diferencias visuales
entre los mismos.
Atención: los reset CSS pueden contener esa y otras muchas líneas
de código que, en su conjunto, servirán al diseñador/a web para
unificar su visualización entre navegadores.

PROPIEDAD: COLOR
Mediante esta propiedad, podrás agregar color a los textos de
tu sitio
pero… ¿cómo se eligen los colores?
Desde Google, puedes buscar “color picker”
(alternativa w3schools).

LIST-STYLE-TYPE
Aplicando esta propiedad
y este valor, vamos a
poder eliminar las bullets y
los números.

ol {
list-style-type: none;
}
ul {
list-style-type: none;
}

FONT-STYLE
.normal {
 font-style: normal;
}
.italica {
 font-style: italic;
}

FONT-WEIGHT
.negrita {
 font-weight: bold;
}
.normal {
 font-weight: normal;
}

FONT-SIZE
.textoGrande {
 font-size: 20px;
}
.textoRelativo {
 font-size: 200%;
}

FONT-FAMILY
.impact {
 font-family:Impact, sans-serif;
}
.comicSans {
 font-family: "Comic Sans MS",
sans-serif;
}

Cada sistema operativo y navegador interpretan de distinta forma las
fuentes predeterminadas.
● Serif: «Times New Roman» en Windows, y «Times» en Macintosh
(diferente a la de Windows).
● Sans serif: «Arial» en Windows, y «Helvetica» en Macintosh.
● Monospace: «Courrier New» en Windows, «Courrier» en Macintosh,
y por lo general «VeraSans» o «DejaVuSans» en Linux.
Nota: te recomendamos visitar el sitio https://www.cssfontstack.com/, para conocer
más acerca de cómo funciona cada fuente, en los distintos sistemas operativos.

Las tipografías Serif son aquellas que llevan remates, es decir, detalles
adicionales en los bordes de las letras. El ejemplo por excelencia de Serif
es la Times New Roman. Son muy usadas en los periódicos impresos,
puesto que los detalles de las letras ayudan a seguir la lectura. Úsalas si
quieres transmitir clasicismo, formalidad, precisión, tradición, delicadeza
y/o refinamiento.
Por el contrario, las tipografías Sans Serif, como su nombre indica –sans
es sin en francés-, carecen de estos detalles y también son denominadas
de palo seco. Algunas de las más conocidas son la Arial o la Calibri. Se
utilizan mucho en entornos digitales, puesto que los detalles son difíciles
de plasmar en píxeles. Transmiten fuerza, modernidad, vanguardia,
elegancia y actualidad, a los diseños y textos en los que se incluyen.

.centrar {
 text-align: center;
}
.aLaDerecha {
 text-align: right;
}
CSS Se ve así
Valores posibles: left | right | center | justify 

LINE-HEIGHT
.interlineado {
 line-height: 1.6;
}
Valores posibles: none | <número> | <longitud> | <porcentaje>


TEXT-DECORATION
.subrayado {
 text-decoration: none;
}
.tachado {
 text-decoration: line-through;
}
Valores posibles: none | underline | overline | line-through

BACKGROUND-COLOR
.fondoFuerte {
 background-color: yellow;
}

BACKGROUND-IMAGE
.catsandstars {
 background-image:
url("https://mdn.mozillademos.org/
files/11991/startransparent.gif"),
url("https://mdn.mozillademos.org/
files/7693/catfront.png");
}
Valores posibles: url | none

BACKGROUND-REPEAT
.ejemplo {
 background-image:
url(https://mdn.mozillademos.org/files/12
005/starsolid.gif),
url(https://developer.cdn.mozilla.net/med
ia/redesign/img/favicon32.png);
 background-repeat: repeat-x,
 repeat-y;
}
CSS Se ve así
Valores posibles: repeat | repeat-x | repeat-y | no-repeat | space | round (ver ejemplos)

BACKGROUND-POSITION
.ejemplo {
 background-image:
url("https://mdn.mozillademos.org/fil
es/12005/starsolid.gif");
 background-repeat: no-repeat;
 background-position: right center;
}
CSS Se ve así
Valores posibles: posicionX posicionY (ver ejemplos) 

BACKGROUND-SIZE
.ejemplo {
 background-image:
url("https://mdn.mozillademos.org/fil
es/12005/starsolid.gif");
 background-repeat: no-repeat;
 background-size: cover;
}
CSS Se ve así
Valores posibles: [ancho] | [alto] | cover | contain (ver ejemplos)

PARALLAX
.parallax {
 background-image: url("/img/maxresdefault.jpg");
 height: 600px;
 background-attachment: fixed;
 background-position: center;
 background-repeat: no-repeat;
 background-size: cover;
 margin-bottom:50px;
}
Se ve así
https://codepen.io/mablen/pen/bZKPNB

UNIDADES DE MEDIDAS
Hay una amplia variedad de absolutas y relativas, pero nos centraremos en:
Absolutas
● Px (pixels): es la unidad que usan
las pantallas.
Relativas
● Rem: relativa a la configuración de
tamaño de la raíz (etiqueta html).
● Porcentaje: tomando en cuenta
que 16px es 100%.
● Viewport: se utilizan para layouts
responsivos (más adelante).

Ahora veamos qué medida es más conveniente para los textos.
html { /* etiqueta raíz 
    font-size: 62.5%;
}
p {
 font-size: 2rem; /* 20px 
}
62.5%, hace que en vez de que 16px sea el valor a tomar en cuenta para calcular las
unidades relativas, se use 10px.

TIPOGRAFÍA LOCAL
Habíamos visto que usando “font-family”, es posible
agregar algunas limitadas fuentes, pero... podemos usar
muchísimas opciones de fuentes si las descargamos y las
agregamos a nuestro directorio raíz.

@font-face {
 font-family: "Mystery Quest";
 src: url("mystery-quest.ttf");
}
p {
 font-family: "Mystery Quest", cursive;
}
El valor de la propiedad src debe indicar
en qué parte de nuestro directorio raíz
guardamos nuestra tipografía post
descarga.

TIPOGRAFÍA WEB
Habíamos visto que usando “font-family”, es posible
agregar algunas limitadas fuentes, pero... podemos usar
muchísimas opciones de fuentes con “Google Fonts”.

CSS
h1 {
 font-family: 'Roboto',
sans-serif;
}
HTML
<head>
 <link
href="https://fonts.googleapis.com
/css?family=Roboto&display=swap"
rel="stylesheet">
 <title>Document</title>
</head>
Ver Google Fonts

*/

/* CLASE 4 BOX MODELING - clase - ID - etiqueta - BORDE - PADDING -MARGIN- DISPLAY - FONT SIZE - FONT FAMILY - OVERFLOW(recortar contenido,dibujarbarras de desplazamiento o mostrar el contenido excedente en un elemento de bloque)-

CONCEPTOS PREVIOS
Sabemos que existen tres maneras de aplicar CSS a un documento
HTML:
● Hacerlo sobre la etiqueta con el atributo style=""
● En el head, insertar la etiqueta <style>
● Buscar un archivo externo con un <link />
(Es de las etiquetas que se cierran solas. Requiere el="stylesheet"
para funcionar. Además un href="" con la ruta al archivo.)

SELECCIÓN DE HTML MEDIANTE CSS

Por etiqueta                        h1 {
                                     propiedad: valor;
                                    }

Por clase 
(anteponiendo el “.”)                            .clase {
                                         propiedad: valor;
                                        }

                       
Por ID
(anteponiendo el “#”)               #id {
                                         propiedad: valor;                                            }



LOS NOMBRES DE LAS CLASES E IDS
No es posible crear nombres separados por espacios.

camelCase
La “joroba de camello”, permite que se puedan leer de forma más simple palabras compuestas.

claseDeMaquetacion

conBorde

productosMasVendidos


PROPIEDADES DE LA CAJA
Todos los elementos del HTML son cajas. Un <strong>, un <h2> y demás, son rectangulares: 
En los elementos de línea, se verá uno al lado del otro. 
En cambio en los de bloque, uno debajo del otro.

ALTO Y ANCHO 
de los elementos

Ancho
🔎 Se denomina width a la propiedad CSS que controla la anchura de la caja de los elementos.

🔎 Dicha propiedad no admite valores negativos, y aquellos en porcentaje se calculan a partir de la anchura de su elemento padre. 

Alto
🔎 La propiedad CSS que controla la altura de la caja de los elementos se denomina height.

🔎 No admite valores negativos, y aquellos en porcentaje se calculan a partir de la altura de su elemento padre. 

ejemplo
div {
border: solid 1px black;
padding: 5px;
display: inline-block;
font-size: 32px;
font-family: Arial;
propiedades que hacen el "problema" 
width: 100px;
height: 110px;
}

TIPOS DE ELEMENTOS
El estándar HTML clasifica a todos sus elementos en dos grandes grupos: elementos en línea (inline) y de bloque (block).
Los elementos de bloque siempre empiezan en una nueva línea, y ocupan todo el espacio disponible hasta el final de la misma (100%). 
Por otra parte, los elementos en línea no empiezan necesariamente en nueva línea y sólo ocupan el espacio necesario para mostrar sus contenidos.
Fuente: https://developer.mozilla.org/es/

DISPLAY
Se encarga de definir cómo se ve un elemento HTML. Los dos comportamientos más importantes son: 
Pasar un elemento de bloque a uno de línea. 
Pasar un elemento de línea a uno de bloque.
Eso se hace con los valores block e inline respectivamente: 
Block: convierte el elemento en uno de bloque.
Inline: transforma el elemento en uno de línea.

Inline-block
Hay una propiedad que permite tomar lo mejor de ambos grupos, llamada “inline-block”. Brinda la posibilidad tener “padding” y “margin” hacia arriba y abajo.

li {
    display: inline-block;
}

POSITION: RELATIVE
El elemento es posicionado de acuerdo al flujo normal del documento, y luego es desplazado en relación a sí mismo.

El desplazamiento no afecta la posición de ningún otro elemento, provocando que se pueda superponer sobre otro.

POSITION: ABSOLUTE
El elemento es removido del flujo normal del documento, sin crearse espacio alguno para el mismo en el esquema de la página. 
Es posicionado relativo a su padre, siempre y cuando su padre tenga “position:relative”. De lo contrario, se ubica relativo al body. Se recomienda establecer un ancho y alto (width, height). 



-------------------------interesantes para header---------------------------------
POSITION: FIXED Y STICKY
Ambos métodos permiten que el elemento se mantenga visible, aunque se haga scroll.

FIXED
Esta posición es similar a la absoluta, con la excepción de que el elemento contenedor es el “viewport”, es decir, la ventana del navegador. ----------importante para botones--------
Puede ser usada para crear elementos que floten, y que queden en la misma posición aunque se haga scroll. 

STICKY
El elemento es posicionado en el “flow” natural del documento, podría decirse que es un valor que funciona de forma híbrida, es decir, como “relative” y también “fixed”. 
Esto es, cuando llega el “viewport” (la ventana del navegador) hasta donde se encuentra, se “pegará” sobre el borde superior.
-----------------------------------------------------------------------------------------

MENÚ CON SUBMENÚ
El position (tanto relative como absolute) se usa, entre otras, para hacer un menú que tenga un submenú emergente. Los ítems del primero son relativos, sirven como borde de cualquier hijo. 

La lista dentro de un list-item es absoluta. Por defecto, la sublista tiene display: none. Recién cuando un list-item detecte el :hover, si adentro tiene una lista, dale display: block */

/* CLASE 5 FLEXBOX -     

Propiedades de padres e hijos

display: Flex (el que inicia): indicará que sus hijos serán “flexibles”.
Flex-direction: Elegir dirección vertical u horizontal.
flex-wrap: ¿Se hará multilínea cuando llegue al limite?
flex-flow:  Abreviación de propiedades.
justify-content: Alinear horizontalmente a los hijos si el padre es “fila” o verticalmente si el padre es “columna”.
align-items: Alinear verticalmente a los hijos (si el padre es “columna”).
align-content:Alinear verticalmente a los hijos cuando son multilínea.

*minimo 2 contenedores para mover con flexbox
ej:
html
 <header class"menuContainer">
    <div class"menu">
        <div>  ejemplo1  </div>
        <div>  ejemplo2  </div>
        <div>  ejemplo3  </div>
    </div>
 <header/>

ej: CSS

padding y margin0
.menuContainer{
    color:white;
    background-color:violet;
    padding: 20px 0;
    display: felx;
    justify-content: center;
}

.menu{
    width:900px;

}


























*/
/* CLASE 6 */
/* CLASE 7 */
/* CLASE 8 */
/* CLASE 9 */
/* CLASE 10 */
/* CLASE 11 */
/* CLASE 12 */
/* CLASE 13 */
/* CLASE 14 */
